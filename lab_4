def create_chocolate_bar(row, col): 
    matrix = [[str((y+1)*10 + (x+1)) for x in range(col)]for y in range(row)]
    return matrix

def print_chocolate_bar(matrix):
    for i in range(len(matrix)):
        print() 
        for j in range(len(matrix[i])):
            print(matrix[i][j], end=" ")
    return None

def chomp(matrix, delcol, delrow):
    if delcol < 0 or delrow < 0:
        return None
    for k in range(delrow, len(matrix)):
        matrix[k] = matrix[k][:delcol]
    matrix = [row for row in matrix if row]
    if not matrix:
        return []
    return matrix

def check_winner(matrix):
    if len(matrix) == 1 and len(matrix[0]) == 1:
        return True
    return False


def ask_cell_number(matrix):
    while True:
        try: 
            user_input = input("Första spelarens tur, välj ett blocknummer: ")
            if user_input == "P":
                raise ValueError("Självförståelse ej tillåtet, vänligen försök igen")
            for row in range(len(matrix)):
                for col in range(len(matrix[row])):
                    if user_input == matrix[row][col]:
                        return (row, col)
            raise ValueError("ruta " + user_input + " finns ej på spelplanen, vänligen försök igen!")
        except ValueError as e:
            print(e)

def game_size():
    valid_numbers = ["2", "3", "4", "5", "6", "7", "8", "9"]
    while True:
        matrix_width = input("Hur många rader ska chokladbaren bestå av (mellan 2-9): ")
        matrix_height = input("Hur många kolumner ska chokladbaren bestå av (mellan 2-9): ")
        if matrix_width in valid_numbers and matrix_height in valid_numbers:
            return int(matrix_height), int(matrix_width)
        else:
            print("Ogiltig inmatning, vänligen försök igen.")